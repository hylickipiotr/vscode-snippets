{
  "Arrow function component": {
    "prefix": "afc",
    "body": [
      "import React from \"react\";",
      "",
      "const $TM_FILENAME_BASE: React.FC<{}> = ({}) => {",
      "  return (<div></div>);",
      "}",
      "",
      "export default $TM_FILENAME_BASE;",
      ""
    ]
  },
  "Arrow function component interface": {
    "prefix": "afci",
    "body": [
      "import React from \"react\";",
      "",
      "interface Props {",
      "  $1",
      "}",
      "",
      "const $TM_FILENAME_BASE: React.FC<Props> = ({}) => {",
      "  return (<div></div>);",
      "}",
      "",
      "export default $TM_FILENAME_BASE;",
      ""
    ]
  },
  "Create context": {
    "prefix": "cc",
    "body": [
      "import React, { createContext, useContext } from \"react\";",
      "",
      "export interface $TM_FILENAME_BASEContextValue {}",
      "",
      "export interface $TM_FILENAME_BASEProviderProps {}",
      "",
      "export const $TM_FILENAME_BASEContext = createContext<$TM_FILENAME_BASEContextValue | null>(",
      "  null",
      ");",
      "",
      "export const $TM_FILENAME_BASEProvider: React.FC<ITransactionProvider> = ({",
      "  ...props",
      "}) => {",
      "  return <$TM_FILENAME_BASEContext.Provider value={{}} {...props} />;",
      "};",
      "",
      "export const $TM_FILENAME_BASEConsumer = $TM_FILENAME_BASEContext.Consumer;",
      "",
      "export const use$TM_FILENAME_BASE = () => {",
      "  const $TM_FILENAME_BASE = useContext($TM_FILENAME_BASEContext);",
      "",
      "  if (!!!$TM_FILENAME_BASE) {",
      "    throw new Error(",
      "      \"$TM_FILENAME_BASE context is undefined, please verify you are calling ,use$TM_FILENAME_BASE() as child of a <$TM_FILENAME_BASEProvider> component.\"",
      "    );",
      "  }",
      "",
      "  return transactions;",
      "};",
      ""
    ]
  }
}
